spring:
  application:
    name: epeius-front
server:
  port: 9001
  undertow:
    max-http-post-size: -1B
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可
    io-threads: 4
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8
    worker-threads: 100
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    #   buffers-per-region: 1024 # 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true

#---- Eureka 注册中心 配置 ----#
eureka:
  instance:
    hostname: ${spring.cloud.client.ip-address} # 服务注册中心实例的主机名
    prefer-ip-address: true #显示服务ip地址
    lease-renewal-interval-in-seconds: 5 # 心跳间隔 时间秒
    instance-id: ${spring.cloud.client.ip-address}:${server.port}
  client:
    register-with-eureka: true # 是否向服务注册自己
    fetch-registry: true # 配置此客户端不获取eureka服务器注册表上的注册信息
    serviceUrl:
      defaultZone: http://admin:admin@${eureka.instance.hostname}:8761/eureka/ # 指定服务注册中心的位置
    registry-fetch-interval-seconds: 20 #表示eureka client间隔多久去拉取服务注册信息

#---- Actuator 服务监控配置 ----#
management:
  endpoints:
    web:
      exposure:
        include: "*" # 健康检查暴露的内容
  endpoint:
    health:
      show-details: always

#---- Feign 配置 ---#
epeius:
  feign:
    backend-service: epeius-backend
feign:
  hystrix:
    enabled: true

#----- Swagger 配置 ------#
swagger:
  scan-package: com.xxxx.epeius.front # 扫描的包地址
  ui:
    show: true # 是否展示UI界面
  info:
    title: 接口文档 # API 文档标题
    contact: # 联系信息
      name: arrows # 名字
      url: http://www.github.com # 主页地址
      email: shangmlee@foxmail.com # 邮箱
